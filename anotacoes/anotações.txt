
24/05/2025:

- Dar uma revisada em  strftime
- rever o codigo do relogio (tem algo estranho no codigo)
- aprendi como funciona o "def":

* def ‚Äî palavra-chave que indica que voc√™ est√° definindo uma fun√ß√£o.

* nome_da_funcao ‚Äî o nome que voc√™ escolhe para a fun√ß√£o.

* par√¢metros ‚Äî valores que a fun√ß√£o pode receber para trabalhar (opcional).

* return ‚Äî comando para a fun√ß√£o devolver um resultado (opcional).

OU SEJA ELE √â UM BLOCO REAUTILIZ√ÅVEL NO CODIGO PYTHON (bom dar uma olhada se tem outra forma de fazer esse tipo de bloco de codigo).

25/05/2025:

Erros comuns em Python:

Erro de syntaxe (SyntaxError):

*Ocorre quando o c√≥digo n√£o segue as regras de sintaxe do Python, como esquecer dois pontos ap√≥s uma declara√ß√£o de fun√ß√£o ou um loop.

def minha_funcao() # Faltam os dois pontos.
    print("Ol√°")

Erro de nome (NameError):

Ocorre quando se faz refer√™ncia a uma vari√°vel ou fun√ß√£o que n√£o foi definida.

print(variavel_nao_definida)

Erro de tipo (TypeError):

Ocorre quando se realiza uma opera√ß√£o com tipos de dados incompat√≠veis, como tentar somar um n√∫mero e uma string.

resultado = 5 + "10"

Erro de √≠ndice (IndexError):

Ocorre quando se tenta acessar um √≠ndice fora do intervalo v√°lido de uma lista ou sequ√™ncia.

lista = [1, 2, 3]
print(lista[3])  # O √≠ndice 3 est√° fora do intervalo.


Debug vs try/except/finally:

| Conceito       | O que faz                                                            | Exemplo                                                           |
| -------------- | -------------------------------------------------------------------- | ----------------------------------------------------------------- |
| **Debug**      | Identifica *onde est√° o erro* e ajuda a entender o fluxo do programa | Ex: usar `print()`, `breakpoints`, depurador do VS Code           |
| **Try/Except** | Evita que um erro *interrompa o programa* e permite lidar com ele    | Ex: tentar abrir um arquivo e mostrar uma mensagem se n√£o existir |

Exemplo de try/except/finally:

try:
    x = int(input("Digite um n√∫mero: "))
    resultado = 10 / x
except ValueError:
    print("Erro: voc√™ n√£o digitou um n√∫mero v√°lido.")
except ZeroDivisionError:
    print("Erro: divis√£o por zero n√£o √© permitida.")
finally:
    print("Fim do bloco try-except.")

üìå Explicando:

 try: onde voc√™ "tenta" executar um c√≥digo que pode dar erro

 except: onde voc√™ captura e trata o erro, sem deixar o programa travar

 finally: sempre √© executado (com erro ou sem erro) ‚Äî √∫til para "fechar arquivos", "desconectar banco de dados" etc.

 ‚ö†Ô∏è Por que isso n√£o √© debug?

Porque se voc√™ n√£o souber o que est√° dando erro e s√≥ colocar tudo dentro de um try, voc√™ "esconde" o erro em vez de entender o que est√° acontecendo.
Por isso, debug e try/except s√£o complementares, n√£o a mesma coisa.

‚úÖ Em resumo:
try/except/finally = controle e tratamento de erros

Debug = descobrir, investigar e entender erros

Voc√™ pode usar try/except ap√≥s entender o erro com debug, para trat√°-lo de forma inteligente.


29/05/2025 

tk.END √© uma constante usada em interfaces gr√°ficas (GUI) com biblioteca Tkinter do Python.
Ela representa o final de um widget de texto, como uma caixa de texto ou um editor de texto.
√â utilizada pra inserir ou apagar conte√∫do em posi√ß√£o especifica do widget.

EM RESUMO : 

tk.END: Representa o final (√∫ltima posi√ß√£o) de um widget de texto.

